
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Coupon {
  id               Int          @id @default(autoincrement())
  code             String       @unique
  discountType     DiscountType @default(PERCENTAGE)
  discountValue    Float
  minOrderValue    Float?
  maxDiscountAmount Float?
  isActive         Boolean      @default(true)
  expirationDate   DateTime?
  usageLimit       Int?
  usageCount       Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  orders           Order[]

  @@map("coupons")
}

enum DiscountType {
  PERCENTAGE
  FIXED_VALUE
}
model Order {
  id             Int        @id @default(autoincrement())
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  status         OrderStatus @default(PENDING)
  totalAmount    Float
  discountAmount Float      @default(0)
  finalAmount    Float
  couponId       Int?
  coupon         Coupon?    @relation(fields: [couponId], references: [id])
  cashbackEarned Float      @default(0)
  cashbackUsed   Float      @default(0)
  pointsEarned   Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  orderItems     OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
model OrderItem {
  id             Int       @id @default(autoincrement())
  orderId        Int
  order          Order     @relation(fields: [orderId], references: [id])
  productId      Int
  product        Product   @relation(fields: [productId], references: [id])
  quantity       Int
  unitPrice      Float
  cashbackAmount Float     @default(0)
  pointsEarned   Int       @default(0)

  @@map("order_items")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  description String?
  image       String
  category    String
  stock       Int      @default(0)
  status      String   @default("available")
  cashbackType CashbackType @default(PERCENTAGE)
  cashbackValue Float      @default(0)
  pointsValue  Int         @default(0)
  orderItems    OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

enum CashbackType {
  PERCENTAGE
  FIXED_VALUE
}
model Reward {
  id          String    @id @default(uuid())
  name        String
  description String?
  pointsCost  Int
  userRewards UserReward[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("rewards")
}

model User{
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orders         Order[]
  userRewards    UserReward[]
  cashbackBalance Float     @default(0)
  pointsBalance   Int       @default(0) // Novo campo para saldo de pontos

  @@map("users")

}
model UserReward {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  rewardId  String
  reward    Reward    @relation(fields: [rewardId], references: [id])
  redeemedAt DateTime  @default(now())

  @@map("user_rewards")
}
